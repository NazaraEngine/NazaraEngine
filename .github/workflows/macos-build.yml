name: macOS build

on:
  pull_request:
  push:
    paths-ignore:
      - '.github/workflows/coverage.yml'
      - '.github/workflows/linux-build.yml'
      - '.github/workflows/msys2-build.yml'
      - '.github/workflows/wasm-build.yml'
      - '.github/workflows/windows-build.yml'
      - '.gitignore'
      - 'LICENSE'
      - 'CHANGELOG.md'
      - 'README.md'
      - 'README_en.md'
      - 'README_fr.md'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        kind: [shared, static]
        confs:
        - { runner: macOS-latest, arch: x86_64, mode: debug, archive: yes }
        - { runner: macOS-latest, arch: x86_64, mode: debug, config: --asan=y, archive: false, cache_key: -asan }
        - { runner: macOS-latest, arch: x86_64, mode: debug, config: --lsan=y, archive: false }
        - { runner: macOS-latest, arch: x86_64, mode: debug, config: --tsan=y, archive: false }
        - { runner: macOS-latest, arch: x86_64, mode: releasedbg, archive: yes }
        - { runner: macOS-14,     arch: arm64,  mode: debug, archive: yes }
        - { runner: macOS-14,     arch: arm64,  mode: debug, config: --asan=y, archive: false, cache_key: -asan }
        - { runner: macOS-14,     arch: arm64,  mode: debug, config: --lsan=y, archive: false }
        - { runner: macOS-14,     arch: arm64,  mode: debug, config: --tsan=y, archive: false }
        - { runner: macOS-14,     arch: arm64,  mode: releasedbg, archive: yes }

    runs-on: ${{ matrix.confs.runner }}
    if: ${{ !contains(github.event.head_commit.message, 'ci skip') }}

    steps:
    - name: Get current date as package key
      id: cache_key
      run: echo "key=$(date +'%W')" >> $GITHUB_OUTPUT

    - name: Checkout repository
      uses: actions/checkout@v4

    # Force xmake to a specific folder (for cache)
    - name: Set xmake env
      run: echo "XMAKE_GLOBALDIR=${{ runner.workspace }}/xmake-global" >> $GITHUB_ENV

    # Install xmake
    - name: Setup xmake
      uses: xmake-io/github-action-setup-xmake@v1
      with:
        xmake-version: branch@dev
        actions-cache-folder: .xmake-cache-W${{ steps.cache_key.outputs.key }}

    # Update xmake repository (in order to have the file that will be cached)
    - name: Update xmake repository
      run: xmake repo --update

    # Fetch xmake dephash
    - name: Retrieve dependencies hash
      id: dep_hash
      run: echo "hash=$(xmake l utils.ci.packageskey)" >> $GITHUB_OUTPUT

    # Cache xmake dependencies
    - name: Restore cached xmake dependencies
      id: restore-depcache
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
        key: macOS-${{ matrix.confs.arch }}-${{ matrix.confs.mode }}${{ matrix.confs.cache_key }}-${{ steps.dep_hash.outputs.hash }}-W${{ steps.cache_key.outputs.key }}

    # Setup compilation mode and install project dependencies
    - name: Configure xmake and install dependencies
      run: xmake config --arch=${{ matrix.confs.arch }} --mode=${{ matrix.confs.mode }} --static=${{ matrix.kind == 'static' && 'yes' || 'no' }} ${{ matrix.confs.config }} --ccache=n --ffmpeg=y --shadernodes=y --tests=y --unitybuild=y --yes

    # Save dependencies
    - name: Save cached xmake dependencies
      if: ${{ !steps.restore-depcache.outputs.cache-hit }}
      uses: actions/cache/save@v4
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
        key: ${{ steps.restore-depcache.outputs.cache-primary-key }}

    # Cache assets downloading
    - name: Restore cached assets
      id: restore-assets
      uses: actions/cache/restore@v4
      with:
        path: assets
        key: assets-${{ hashFiles('assets/examples_version.txt', 'assets/unittests_version.txt') }}

    # Build the engine
    - name: Build Nazara
      run: xmake --yes

    - name: Save downloaded assets
      if: ${{ !steps.restore-assets.outputs.cache-hit }}
      uses: actions/cache/save@v4
      with:
        path: assets
        key: ${{ steps.restore-assets.outputs.cache-primary-key }}

    # Run unit tests
    - name: Run unit tests
      if: matrix.confs.mode != 'releasedbg'
      run: xmake run UnitTests

    # Install the result files
    - name: Install Nazara
      if: ${{ (github.ref == 'refs/heads/main') && github.event_name == 'push' && matrix.confs.archive }}
      run: xmake install -vo package

    - name: "Set PACKAGE_NAME variable"
      if: ${{ (github.ref == 'refs/heads/main') && github.event_name == 'push' && matrix.confs.archive }}
      run: echo "PACKAGE_NAME=macOS_${{ matrix.confs.arch }}_${{ matrix.confs.mode }}_${{ matrix.kind }}.tar.gz" >> $GITHUB_ENV
      shell: bash

    - name: Archive result
      uses: ihiroky/archive-action@v1
      if: ${{ (github.ref == 'refs/heads/main') && github.event_name == 'push' && matrix.confs.archive }}
      with:
        root_dir: package
        file_path: ${{ env.PACKAGE_NAME }}
        verbose: true

    # Nightly tags (for commits to main branch)
    - name: Upload binaries to release (main)
      uses: svenstaro/upload-release-action@v2
      if: ${{ (github.ref == 'refs/heads/main') && github.event_name == 'push' && matrix.confs.archive }}
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.PACKAGE_NAME }}
        asset_name: ${{ env.PACKAGE_NAME }}
        tag: "0.0.0-nightly"
        overwrite: true
