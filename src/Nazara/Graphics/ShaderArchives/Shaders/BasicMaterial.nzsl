[nzsl_version("1.1")]
module BasicMaterial;

import InstanceData from Engine.InstanceData;
import SkeletalData from Engine.SkeletalData;
import ViewerData from Engine.ViewerData;
import SkinLinearPosition from Engine.SkinningLinear;

// Pass-specific options
option DepthPass: bool = false;
option DistanceDepth: bool = false;
option ShadowPass: bool = false;

// Material options
option HasBaseColorTexture: bool = false;
option HasAlphaTexture: bool = false;
option AlphaTest: bool = false;

// Billboard related options
option Billboard: bool = false;

// Vertex declaration related options
const InvalidLoc = u32.Max;

option VertexColorLoc: u32 = InvalidLoc;
option VertexNormalLoc: u32 = InvalidLoc;
option VertexPositionLoc: u32 = InvalidLoc;
option VertexSizeRotLocation: u32 = InvalidLoc;
option VertexUvLoc: u32 = InvalidLoc;

option VertexJointIndicesLoc: u32 = InvalidLoc;
option VertexJointWeightsLoc: u32 = InvalidLoc;

const HasNormal = (VertexNormalLoc != InvalidLoc);
const HasVertexColor = (VertexColorLoc != InvalidLoc);
const HasColor = (HasVertexColor || Billboard);
const HasVertexUV = (VertexUvLoc != InvalidLoc);
const HasUV = (HasVertexUV);
const HasSkinning = (VertexJointIndicesLoc != InvalidLoc && VertexJointWeightsLoc != InvalidLoc);

[layout(std140)]
struct MaterialSettings
{
	[tag("AlphaTestThreshold")]
	AlphaThreshold: f32,

	[tag("ShadowMapNormalOffset")]
	ShadowMapNormalOffset: f32,

	[tag("ShadowPosScale")]
	ShadowPosScale: f32,

	[tag("BaseColor")]
	BaseColor: vec4[f32]
}

[tag("Material")]
[auto_binding]
external
{
	[tag("Settings")] settings: uniform[MaterialSettings],
	[tag("BaseColorMap")] MaterialBaseColorMap: sampler2D[f32],
	[tag("AlphaMap")] MaterialAlphaMap: sampler2D[f32],
}

[tag("Engine")]
[auto_binding]
external
{
	[tag("TextureOverlay")] TextureOverlay: sampler2D[f32],
	[tag("InstanceData")] instanceData: uniform[InstanceData],
	[tag("ViewerData")] viewerData: uniform[ViewerData],
	[tag("SkeletalData")] skeletalData: uniform[SkeletalData]
}

struct VertOut
{
	[location(0)] worldPos: vec3[f32],
	[location(1), cond(HasUV)] uv: vec2[f32],
	[location(2), cond(HasColor)] color: vec4[f32],
	[builtin(position)] position: vec4[f32]
}

// Fragment stage
struct FragOut
{
	[location(0)] RenderTarget0: vec4[f32],
	[builtin(frag_depth), cond(DistanceDepth)] fragdepth: f32
}

fn ComputeColor(input: VertOut) -> vec4[f32]
{
	let color = settings.BaseColor;

	const if (HasUV)
		color.a *= TextureOverlay.Sample(input.uv).r;

	const if (HasColor)
		color *= input.color;

	const if (HasBaseColorTexture)
		color *= MaterialBaseColorMap.Sample(input.uv);

	const if (HasAlphaTexture)
		color.w *= MaterialAlphaMap.Sample(input.uv).x;

	const if (AlphaTest)
	{
		if (color.w < settings.AlphaThreshold)
			discard;
	}

	return color;
}

[entry(frag), cond(!DepthPass || AlphaTest)]
fn FragMain(input: VertOut) -> FragOut
{
	let color = ComputeColor(input);

	let output: FragOut;
	output.RenderTarget0 = color;
	return output;
}

// Shadow passes entries
[entry(frag), cond(DepthPass && DistanceDepth)]
[depth_write(replace)]
fn FragDepthDist(input: VertOut) -> FragOut
{
	let color = ComputeColor(input);

	let output: FragOut;
	output.RenderTarget0 = color;

	let dist = distance(viewerData.eyePosition, input.worldPos);
	output.fragdepth = dist / viewerData.farPlane;

	return output;
}

[entry(frag), cond(DepthPass && AlphaTest && !DistanceDepth)]
fn FragDepth(input: VertOut) -> FragOut
{
	let color = ComputeColor(input);

	let output: FragOut;
	output.RenderTarget0 = color;
	return output;
}

[entry(frag), cond(DepthPass && !AlphaTest && !DistanceDepth)]
fn FragDepthNoAlpha() {} //< dummy

// Vertex stage
[cond(!Billboard)]
struct VertIn
{
	[location(VertexPositionLoc)]
	pos: vec3[f32],

	[cond(HasVertexColor), location(VertexColorLoc)]
	color: vec4[f32],

	[cond(HasNormal), location(VertexNormalLoc)]
	normal: vec3[f32],

	[cond(HasVertexUV), location(VertexUvLoc)]
	uv: vec2[f32],

	[cond(HasSkinning), location(VertexJointIndicesLoc)]
	jointIndices: vec4[i32],

	[cond(HasSkinning), location(VertexJointWeightsLoc)]
	jointWeights: vec4[f32]
}

[cond(Billboard)]
struct BillboardVertIn
{
	[builtin(vertex_index)] vertIndex: i32,

	[location(VertexSizeRotLocation)]
	sizeRot: vec4[f32], //< width,height,sin,cos

	[cond(HasVertexUV), location(VertexUvLoc)]
	uv: vec2[f32],

	[cond(HasVertexColor), location(VertexColorLoc)]
	color: vec4[f32]
}

const billboardPos = array[vec2[f32]](
	vec2[f32](-0.5, -0.5),
	vec2[f32]( 0.5, -0.5),
	vec2[f32](-0.5, 0.5),
	vec2[f32]( 0.5, 0.5)
);

[entry(vert), cond(Billboard)]
fn VertBillboard(input: BillboardVertIn) -> VertOut
{
	let position = billboardPos[input.vertIndex % 4];

	let size = input.sizeRot.xy;
	let sinCos = input.sizeRot.zw;

	let rotatedPosition = vec2[f32](
		position.x * sinCos.y - position.y * sinCos.x,
		position.y * sinCos.y + position.x * sinCos.x
	);
	rotatedPosition *= size;

	let cameraRight = vec3[f32](viewerData.viewMatrix[0][0], viewerData.viewMatrix[1][0], viewerData.viewMatrix[2][0]);
	let cameraUp = vec3[f32](viewerData.viewMatrix[0][1], viewerData.viewMatrix[1][1], viewerData.viewMatrix[2][1]);

	let worldPosition = vec3[f32](instanceData.worldMatrix[3].xyz);
	worldPosition += cameraRight * rotatedPosition.x;
	worldPosition += cameraUp * rotatedPosition.y;

	let output: VertOut;
	output.worldPos = worldPosition;
	output.position = viewerData.viewProjMatrix * vec4[f32](worldPosition, 1.0);

	const if (HasVertexUV)
		output.uv = input.uv;

	const if (HasColor)
		output.color = input.color;

	return output;
}

[entry(vert), cond(!Billboard)]
fn VertMain(input: VertIn) -> VertOut
{
	let pos: vec3[f32];

	const if (HasSkinning)
	{
		let jointMatrices = array[mat4[f32]](
			skeletalData.jointMatrices[input.jointIndices[0]],
			skeletalData.jointMatrices[input.jointIndices[1]],
			skeletalData.jointMatrices[input.jointIndices[2]],
			skeletalData.jointMatrices[input.jointIndices[3]]
		);

		let skinningOutput = SkinLinearPosition(jointMatrices, input.jointWeights, input.pos);
		pos = skinningOutput.position;
	}
	else
		pos = input.pos;

	const if (ShadowPass)
	{
		pos *= settings.ShadowPosScale;
		const if (HasNormal)
			pos -= input.normal * settings.ShadowMapNormalOffset;
	}

	let worldPosition = instanceData.worldMatrix * vec4[f32](pos, 1.0);

	let output: VertOut;
	output.worldPos = worldPosition.xyz;
	output.position = viewerData.viewProjMatrix * worldPosition;

	const if (HasColor)
		output.color = input.color;

	const if (HasVertexUV)
		output.uv = input.uv;

	return output;
}
