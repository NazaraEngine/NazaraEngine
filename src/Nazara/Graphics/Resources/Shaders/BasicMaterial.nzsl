[nzsl_version("1.0")]
module BasicMaterial;

import InstanceData from Engine.InstanceData;
import SkeletalData from Engine.SkeletalData;
import ViewerData from Engine.ViewerData;

// Pass-specific options
option DepthPass: bool = false;

// Material options
option HasBaseColorTexture: bool = false;
option HasAlphaTexture: bool = false;
option AlphaTest: bool = false;

// Billboard related options
option Billboard: bool = false;
option BillboardCenterLocation: i32 = -1;
option BillboardColorLocation: i32 = -1;
option BillboardSizeRotLocation: i32 = -1;

// Vertex declaration related options
option VertexColorLoc: i32 = -1;
option VertexPositionLoc: i32;
option VertexUvLoc: i32 = -1;

option VertexJointIndicesLoc: i32 = -1;
option VertexJointWeightsLoc: i32 = -1;

const HasVertexColor = (VertexColorLoc >= 0);
const HasColor = (HasVertexColor || Billboard);
const HasUV = (VertexUvLoc >= 0);
const HasSkinning = (VertexJointIndicesLoc >= 0 && VertexJointWeightsLoc >= 0);

[layout(std140)]
struct MaterialSettings
{
	[tag("AlphaTestThreshold")]
	AlphaThreshold: f32,

	[tag("BaseColor")]
	BaseColor: vec4[f32]
}

[tag("Material")]
external
{
	[tag("Settings"), binding(0)] settings: uniform[MaterialSettings],
	[tag("BaseColorMap"), binding(1)] MaterialBaseColorMap: sampler2D[f32],
	[tag("AlphaMap"), binding(2)] MaterialAlphaMap: sampler2D[f32],
}

[tag("Engine")]
external
{
	[tag("TextureOverlay"), binding(3)] TextureOverlay: sampler2D[f32],
	[tag("InstanceData"), binding(4)] instanceData: uniform[InstanceData],
	[tag("ViewerData"), binding(5)] viewerData: uniform[ViewerData],
	[tag("SkeletalData"), binding(6)] skeletalData: uniform[SkeletalData]
}

// Fragment stage
struct FragIn
{
	[location(0), cond(HasUV)] uv: vec2[f32],
	[location(1), cond(HasColor)] color: vec4[f32]
}

struct FragOut
{
	[location(0)] RenderTarget0: vec4[f32]
}

[entry(frag), cond(!DepthPass || AlphaTest)]
fn main(input: FragIn) -> FragOut
{
	let color = settings.BaseColor;

	const if (HasUV)
		color *= TextureOverlay.Sample(input.uv);

	const if (HasColor)
		color *= input.color;

	const if (HasBaseColorTexture)
		color *= MaterialBaseColorMap.Sample(input.uv);

	const if (HasAlphaTexture)
		color.w *= MaterialAlphaMap.Sample(input.uv).x;

	const if (AlphaTest)
	{
		if (color.w < settings.AlphaThreshold)
			discard;
	}

	let output: FragOut;
	output.RenderTarget0 = color;
	return output;
}

// Dummy fragment shader (TODO: Add a way to delete stage?)
[entry(frag), cond(DepthPass && !AlphaTest)]
fn main() {}

// Vertex stage
struct VertIn
{
	[location(VertexPositionLoc)] 
	pos: vec3[f32],

	[cond(HasVertexColor), location(VertexColorLoc)] 
	color: vec4[f32],

	[cond(HasUV), location(VertexUvLoc)] 
	uv: vec2[f32],

	[cond(HasSkinning), location(VertexJointIndicesLoc)]
	jointIndices: vec4[i32],

	[cond(HasSkinning), location(VertexJointWeightsLoc)]
	jointWeights: vec4[f32],

	[cond(Billboard), location(BillboardCenterLocation)]
	billboardCenter: vec3[f32],

	[cond(Billboard), location(BillboardSizeRotLocation)]
	billboardSizeRot: vec4[f32], //< width,height,sin,cos

	[cond(Billboard), location(BillboardColorLocation)]
	billboardColor: vec4[f32]
}

struct VertOut
{
	[location(0), cond(HasUV)] uv: vec2[f32],
	[location(1), cond(HasColor)] color: vec4[f32],
	[builtin(position)] position: vec4[f32]
}

[entry(vert), cond(Billboard)]
fn billboardMain(input: VertIn) -> VertOut
{
	let size = input.billboardSizeRot.xy;
	let sinCos = input.billboardSizeRot.zw;

	let rotatedPosition = vec2[f32](
		input.pos.x * sinCos.y - input.pos.y * sinCos.x,
		input.pos.y * sinCos.y + input.pos.x * sinCos.x
	);
	rotatedPosition *= size;

	let cameraRight = vec3[f32](viewerData.viewMatrix[0][0], viewerData.viewMatrix[1][0], viewerData.viewMatrix[2][0]);
	let cameraUp = vec3[f32](viewerData.viewMatrix[0][1], viewerData.viewMatrix[1][1], viewerData.viewMatrix[2][1]);

	let vertexPos = input.billboardCenter;
	vertexPos += cameraRight * rotatedPosition.x;
	vertexPos += cameraUp * rotatedPosition.y;

	let output: VertOut;
	output.position = viewerData.viewProjMatrix * instanceData.worldMatrix * vec4[f32](vertexPos, 1.0);
	
	const if (HasColor)
		output.color = input.billboardColor;
	
	const if (HasUV)
		output.uv = input.pos.xy + vec2[f32](0.5, 0.5);

	return output;
}

[entry(vert), cond(!Billboard)]
fn main(input: VertIn) -> VertOut
{
	let pos: vec3[f32];
	const if (HasSkinning)
	{
		pos = vec3[f32](0.0, 0.0, 0.0);

		[unroll]
		for i in 0 -> 4
		{
			let jointIndex = input.jointIndices[i];
			let jointWeight = input.jointWeights[i];

			let jointMatrix = skeletalData.JointMatrices[jointIndex];
			pos += (jointMatrix * vec4[f32](input.pos, 1.0)).xyz * jointWeight;
		}
	}
	else
		pos = input.pos;

	let output: VertOut;
	output.position = viewerData.viewProjMatrix * instanceData.worldMatrix * vec4[f32](pos, 1.0);

	const if (HasColor)
		output.color = input.color;

	const if (HasUV)
		output.uv = input.uv;

	return output;
}
