[layout(std140)]
struct ViewerData
{
	projectionMatrix: mat4<f32>,
	invProjectionMatrix: mat4<f32>,
	viewMatrix: mat4<f32>,
	invViewMatrix: mat4<f32>,
	viewProjMatrix: mat4<f32>,
	invViewProjMatrix: mat4<f32>,
	renderTargetSize: vec2<f32>,
	invRenderTargetSize: vec2<f32>,
	eyePosition: vec3<f32>
}

external
{
	[set(0), binding(0)] viewerData: uniform<ViewerData>,
	[set(1), binding(0)] colorTexture: sampler2D<f32>,
	[set(1), binding(1)] bloomTexture: sampler2D<f32>,
}

struct FragIn
{
	[builtin(fragcoord)] fragcoord: vec4<f32>
}

struct FragOut
{
	[location(0)] color: vec4<f32>
}

struct VertIn
{
	[location(0)] pos: vec3<f32>
}

struct VertOut
{
	[builtin(position)] position: vec4<f32>
}

[entry(frag)]
fn main(input: FragIn) -> FragOut
{
	let fragcoord = input.fragcoord.xy * viewerData.invRenderTargetSize;
	
	let output: FragOut;
	output.color = colorTexture.Sample(fragcoord) + bloomTexture.Sample(fragcoord);

	return output;
}

[entry(vert)]
fn main(input: VertIn) -> VertOut
{
	let output: VertOut;
	output.position = vec4<f32>(input.pos, 1.0);

	return output;
}
