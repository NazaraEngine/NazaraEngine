option HAS_DIFFUSE_TEXTURE: bool;
option HAS_ALPHA_TEXTURE: bool;
option ALPHA_TEST: bool;

const HasUV = HAS_DIFFUSE_TEXTURE || HAS_ALPHA_TEXTURE;

[layout(std140)]
struct InstanceData
{
	worldMatrix: mat4<f32>,
	invWorldMatrix: mat4<f32>
}

[layout(std140)]
struct ViewerData
{
	projectionMatrix: mat4<f32>,
	invProjectionMatrix: mat4<f32>,
	viewMatrix: mat4<f32>,
	invViewMatrix: mat4<f32>,
	viewProjMatrix: mat4<f32>,
	invViewProjMatrix: mat4<f32>,
	renderTargetSize: vec2<f32>,
	invRenderTargetSize: vec2<f32>,
	eyePosition: vec3<f32>
}

external
{
	[set(0), binding(0)] viewerData: uniform<ViewerData>,
	[set(1), binding(0)] instanceData: uniform<InstanceData>
}

// Vertex stage
struct VertIn
{
	[location(0)] pos: vec3<f32>,
	[location(1), cond(HasUV)] uv: vec2<f32>
}

struct VertOut
{
	[builtin(position)] position: vec4<f32>
}

[entry(vert)]
fn main(input: VertIn) -> VertOut
{
	let output: VertOut;
	output.position = viewerData.viewProjMatrix * instanceData.worldMatrix * vec4<f32>(input.pos, 1.0);

	return output;
}
